name: Deployk8s

on:
  workflow_run:
    workflows: [Terraform]
    types:
      - completed

jobs:
  deploy-k8s:
    runs-on: ubuntu-latest
    env:
      DB_USER: doadmin
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_TOKEN_ACCESS }}

      - name: Get db user and host
        run: |
          set -e
          PG_DB_ID=$(doctl db list | grep pg | awk '{print $1}')
          PG_DB_PASS=$(doctl databases user get $PG_DB_ID $DB_USER --format Password --no-header)
          PG_DB_HOST=$(doctl databases connection $PG_DB_ID --format Host --no-header)
          PG_DB_PORT=$(doctl databases connection $PG_DB_ID --format Port --no-header)
          echo "PG_DB_PORT"=$PG_DB_PORT >> $GITHUB_ENV
          echo "PG_DB_HOST"=$PG_DB_HOST >> $GITHUB_ENV
          echo "PG_DB_PASS=$PG_DB_PASS" >> $GITHUB_ENV

      - name: Save kubeconfig
        run: |
          K8S_CLUSTER_NAME=`doctl kubernetes cluster list --no-header --format Name`
          doctl kubernetes cluster kubeconfig save $K8S_CLUSTER_NAME

      - name: Add NATS Helm repository
        run: |
          helm repo add nats https://nats-io.github.io/k8s/helm/charts/
          helm repo update

      - name: Install NATS using Helm
        run: |
          set -e 
          helm upgrade --install nats nats/nats -f k8s/app/nats-values.yaml

      - name: Kube Apply
        env:
          PG_DB_HOST: ${{ env.PG_DB_HOST }}
          PG_DB_PORT: ${{ env.PG_DB_PORT }}
          PG_DB_PASS: ${{ env.PG_DB_PASS }}
        run: |
          sed -i "s|#PG_DB_HOST#|${PG_DB_HOST}|g; s|#PG_DB_PORT#|${PG_DB_PORT}|g" k8s/app/myvideo-configmap.yaml

          sed -i 's/#PG_DB_PASS#/'"$PG_DB_PASS"'/g' k8s/app/myvideo-secret.yaml

          kubectl apply -f k8s/app/myvideo-secret.yaml
          kubectl apply -f k8s/app/myvideo-configmap.yaml
          kubectl apply -f k8s/app/myvideo-manager-deployment.yaml --wait=true
          kubectl apply -f k8s/app/myvideo-hpa.yaml
          kubectl apply -f k8s/app/myvideo-manager-svc.yaml --wait=true
